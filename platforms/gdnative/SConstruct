#!python

import os, sys, platform, json, subprocess
import SCons

def replace_flags(flags, replaces):
    for k, v in replaces.items():
        if k in flags:
            flags[flags.index(k)] = v


env = Environment()
opts = Variables(["customs.py"], ARGUMENTS)
opts.Add(EnumVariable("version", "The Godot target version", "3.x", ["3.x", "4.x"]))
opts.Add(PathVariable('target_path', 'The path where the lib is installed.', '../../bin/'))
opts.Add(PathVariable('target_name', 'The library name.', 'libdialog', PathVariable.PathAccept))

files_to_copy = ["dialog.gdnlib", "dialog.gdns"]

# Minimum target platform versions.
if "ios_min_version" not in ARGUMENTS:
    ARGUMENTS["ios_min_version"] = "11.0"
if "macos_deployment_target" not in ARGUMENTS:
    ARGUMENTS["macos_deployment_target"] = "11.0"
if "android_api_level" not in ARGUMENTS:
    ARGUMENTS["android_api_level"] = "28"

if ARGUMENTS["version"] == "4.x":
    if ARGUMENTS["target"] == "debug":
        ARGUMENTS["target"] = "template_debug"
    if ARGUMENTS["target"] == "release":
        ARGUMENTS["target"] = "template_release"

opts.Update(env)

if env["version"] == "3.x":
    if "platform" in ARGUMENTS and ARGUMENTS["platform"] == "macos":
        ARGUMENTS["platform"] = "osx"  # compatibility with old osx name

    env = SConscript("../../godot-cpp-3.x/SConstruct")

    # Patch base env
    replace_flags(
        env["CCFLAGS"],
        {
            "-mios-simulator-version-min=10.0": "-mios-simulator-version-min=11.0",
            "-miphoneos-version-min=10.0": "-miphoneos-version-min=11.0",
            "/std:c++14": "/std:c++17",
            "-std=c++14": "-std=c++17",
        },
    )

    env = env.Clone()

    if env["target"] == "debug":
        env.Append(CPPDEFINES=["DEBUG_ENABLED"])

    if env["platform"] == "windows" and env["use_mingw"]:
        env.Append(LINKFLAGS=["-static-libgcc"])

    if env["platform"] == "android":
        env.Append(LINKFLAGS=["-shared"])

    if env["platform"] == "osx":
        env["platform"] = "macos"  # compatibility with old osx name
        ARGUMENTS["platform"] = "macos"
        env["CC"] = "clang"  # CC is not set in 3.x and can result in it being "gcc".

    if env["platform"] == "ios":
        env["ios_min_version"] = "11.0"

    # Normalize suffix
    if env["platform"] in ["windows", "linux"]:
        env["arch"] = "x86_32" if env["bits"] == "32" else "x86_64"
        env["arch_suffix"] = env["arch"]
    elif env["platform"] == "macos":
        env["arch"] = env["macos_arch"]
        env["arch_suffix"] = env["arch"]
    elif env["platform"] == "ios":
        env["arch"] = "arm32" if env["ios_arch"] == "armv7" else env["ios_arch"]
        env["arch_suffix"] = env["ios_arch"] + (".simulator" if env["ios_simulator"] else "")
    elif env["platform"] == "android":
        env["arch"] = {
            "armv7": "arm32",
            "arm64v8": "arm64",
            "x86": "x86_32",
            "x86_64": "x86_64",
        }[env["android_arch"]]
        env["arch_suffix"] = env["arch"]

    env["suffix"] = ".{}.{}.{}".format(env["platform"], env["target"], env["arch_suffix"])
    env["debug_symbols"] = False

    # Some windows specific hacks.
    if env["platform"] == "windows":
        if sys.platform not in ["win32", "msys"]:
            # Set missing CC for MinGW from upstream build module.
            if env["bits"] == "64":
                env["CC"] = "x86_64-w64-mingw32-gcc"
            elif env["bits"] == "32":
                env["CC"] = "i686-w64-mingw32-gcc"
        elif not env["use_mingw"]:
            # Mark as MSVC build (would have failed to build the library otherwise).
            env["is_msvc"] = True
else:
    env = SConscript("../../godot-cpp/SConstruct").Clone()

# Should probably go to upstream godot-cpp.
# We let SCons build its default ENV as it includes OS-specific things which we don't
# want to have to pull in manually.
# Then we prepend PATH to make it take precedence, while preserving SCons' own entries.
env.PrependENVPath("PATH", os.getenv("PATH"))
env.PrependENVPath("PKG_CONFIG_PATH", os.getenv("PKG_CONFIG_PATH"))
if "TERM" in os.environ:  # Used for colored output.
    env["ENV"]["TERM"] = os.environ["TERM"]

# Patch mingw SHLIBSUFFIX.
if env["platform"] == "windows" and env["use_mingw"]:
    env["SHLIBSUFFIX"] = ".dll"

# Patch OSXCross config.
if env["platform"] == "macos" and os.environ.get("OSXCROSS_ROOT", ""):
    env["SHLIBSUFFIX"] = ".dylib"
    if env["macos_deployment_target"] != "default":
        env["ENV"]["MACOSX_DEPLOYMENT_TARGET"] = env["macos_deployment_target"]

# Patch linux flags to statically link libgcc and libstdc++
if env["platform"] == "linux":
    env.Append(
        LINKFLAGS=[
            "-Wl,--no-undefined",
            "-static-libgcc",
            "-static-libstdc++",
        ]
    )
    # And add some linux dependencies.
    env.Append(LIBS=["pthread", "dl"])

if env["platform"] == "ios":
    env["SHLIBSUFFIX"] = ".a"

opts.Update(env)

target = env["target"]
if env["version"] == "3.x":
    result_path = os.path.join(env['target_path'], env["version"], "plugins")
else:
    result_path = os.path.join(env['target_path'], env["version"], "extensions")

result_path = os.path.join(result_path, "dialog")

targets = []

for f in files_to_copy:
    cmd = env.Command(target=os.path.join(result_path, f), source='src/' + f, action=Copy('$TARGET', '$SOURCE'))
    targets.append(cmd)

Default(targets)

# Our includes and sources
env.Append(CPPPATH=["src/"])
sources = []

if env["platform"] == "ios":
    sources.append(["src/Dialog_ios.mm"])
elif env["platform"] == "macos" or env["platform"] == "osx":
    sources.append(["src/Dialog_macos.mm"])
elif env["platform"] == "android":
    sources.append(["src/Dialog_android.cpp"])
else:
    sources.append(["src/Dialog.cpp"])

godot_cpp_bin = ""
if env["version"] == "3.x":
    env.Append(CPPDEFINES=["GDNATIVE"])
    sources.append("src/gdnative.cpp")
    godot_cpp_bin = "../../godot-cpp-3.x/bin"
else:
    env.Append(CPPDEFINES=["GDEXTENSION"])
    sources.append("src/gdextension.cpp")
    godot_cpp_bin = "../../godot-cpp/bin"

# Make the shared library
result_name = "{}{}{}".format(env['target_name'], env["suffix"], env["SHLIBSUFFIX"])
target = os.path.join(result_path, "lib", result_name)

if env["platform"] == "ios":
    merge_command = "libtool -static -o {} {} {}".format(target, "src/" + result_name, os.path.join(godot_cpp_bin, str(env["LIBS"][0])))
    lib = env.StaticLibrary(target="src/" + result_name, source=sources)
    Default(lib)
    library = env.Command(target, ["src/" + result_name], merge_command)
else:
    library = env.SharedLibrary(target=target, source=sources)

Default(library)

